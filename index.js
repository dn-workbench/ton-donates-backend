require("dotenv").config();

const fastify = require("fastify");
const cors = require("@fastify/cors");
const axios = require("axios");
const fs = require("fs");
const path = require("path");

// ===== Google Sheets (–º—è–≥–∫–∏–π –∏–º–ø–æ—Ä—Ç) =====
let updateStats = async () => {};
try {
  ({ updateStats } = require("./googleSheets"));
  console.log("‚úÖ googleSheets –ø–æ–¥–∫–ª—é—á–µ–Ω");
} catch (e) {
  console.warn("‚ö†Ô∏è  googleSheets –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω:", e?.message || e);
}

process.on("uncaughtException", (err) =>
  console.error("üí• uncaughtException:", err)
);
process.on("unhandledRejection", (reason) =>
  console.error("üí• unhandledRejection:", reason)
);

// ===== ENV =====
const PORT = Number(process.env.PORT || 3000);
const HOST = "0.0.0.0";
const FRONTEND_ORIGIN = process.env.FRONTEND_ORIGIN || "*";

const STATS_FILE = process.env.STATS_FILE || "stats.json";
const STATE_FILE = process.env.STATE_FILE || "state.json";

const TON_WALLET = process.env.TON_WALLET;
const TONAPI_KEY = process.env.TONAPI_KEY || "";
const POLL_INTERVAL_MS = Number(process.env.POLL_INTERVAL_MS || 30000);

const ADMIN_KEY = process.env.ADMIN_KEY || ""; // <-- –¥–æ–±–∞–≤—å –≤ .env

// ===== Fastify app =====
const app = fastify({ logger: false });
app.register(cors, {
  origin: FRONTEND_ORIGIN === "*" ? true : FRONTEND_ORIGIN,
});

// ===== helpers =====
function safeReadJSON(file, fallback) {
  try {
    if (fs.existsSync(file)) return JSON.parse(fs.readFileSync(file, "utf8"));
  } catch (e) {
    console.warn(`‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å ${file}:`, e.message);
  }
  return fallback;
}
function safeWriteJSON(file, data) {
  try {
    fs.writeFileSync(file, JSON.stringify(data, null, 2));
  } catch (e) {
    console.warn(`‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å ${file}:`, e.message);
  }
}

console.log("üîß CWD:", process.cwd());
console.log("üìÑ STATS_FILE:", path.resolve(STATS_FILE));
console.log("üìÑ STATE_FILE:", path.resolve(STATE_FILE));

// ===== state & stats =====
let stats = safeReadJSON(STATS_FILE, {});
let state = Object.assign({ lastSeenTxId: null }, safeReadJSON(STATE_FILE, {}));
const NANOTONS = 1e9;

// ‚Äî –±–∞–∑–æ–≤—ã–µ 40 —Å—Ç—Ä–∞–Ω ‚Äî —á—Ç–æ–±—ã /stats –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –±—ã–ª –ø—É—Å—Ç—ã–º ‚Äî
const BASE_COUNTRIES = [
  "United States",
  "India",
  "China",
  "Japan",
  "Germany",
  "United Kingdom",
  "France",
  "Italy",
  "Canada",
  "Australia",
  "Brazil",
  "Mexico",
  "Spain",
  "Netherlands",
  "Turkey",
  "South Korea",
  "Indonesia",
  "Saudi Arabia",
  "United Arab Emirates",
  "Israel",
  "Sweden",
  "Switzerland",
  "Poland",
  "Ukraine",
  "Russia",
  "Argentina",
  "Colombia",
  "South Africa",
  "Nigeria",
  "Egypt",
  "Vietnam",
  "Thailand",
  "Malaysia",
  "Singapore",
  "Philippines",
  "Kazakhstan",
  "Norway",
  "Denmark",
  "Ireland",
  "Austria",
];
function ensureBaseCountries(obj) {
  for (const c of BASE_COUNTRIES) if (obj[c] == null) obj[c] = 0;
}
ensureBaseCountries(stats);

// ‚Äî –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω –ø–æ –∫–æ–º–º–µ–Ω—Ç—É ‚Äî
const COUNTRY_SET = new Set(BASE_COUNTRIES);
const ALIASES = {
  USA: "United States",
  US: "United States",
  "U.S.": "United States",
  UK: "United Kingdom",
  UAE: "United Arab Emirates",
  KOREA: "South Korea",
  "SOUTH KOREA": "South Korea",
  RUSSIA: "Russia",
  CHINA: "China",
  INDIA: "India",
};
function normalizeCountry(raw) {
  if (!raw || typeof raw !== "string") return null;
  const s = raw.trim();
  if (!s) return null;
  if (COUNTRY_SET.has(s)) return s;
  const upper = s.toUpperCase();
  if (ALIASES[upper]) return ALIASES[upper];
  const title =
    s.length < 3 ? s.toUpperCase() : s[0].toUpperCase() + s.slice(1);
  if (COUNTRY_SET.has(title)) return title;
  const lower = s.toLowerCase();
  for (const c of COUNTRY_SET) if (c.toLowerCase() === lower) return c;
  return null;
}
function addDonation(country, amountTON) {
  if (!country || isNaN(amountTON) || amountTON <= 0) return;
  if (!stats[country]) stats[country] = 0;
  stats[country] = Number((stats[country] + amountTON).toFixed(6));
}

// ===== TonAPI polling =====
async function fetchFromTonapi() {
  if (!TON_WALLET) throw new Error("TON_WALLET –Ω–µ –∑–∞–¥–∞–Ω –≤ .env");

  const url = `https://tonapi.io/v2/blockchain/accounts/${TON_WALLET}/transactions?limit=50`;
  const headers = TONAPI_KEY ? { Authorization: `Bearer ${TONAPI_KEY}` } : {};

  const { data } = await axios.get(url, { headers, timeout: 15000 });
  const items = data?.transactions || data?.items || [];
  if (!Array.isArray(items) || items.length === 0) return;

  for (const tx of items) {
    const inMsg = tx?.in_msg;
    if (!inMsg) continue; // —Ç–æ–ª—å–∫–æ –≤—Ö–æ–¥—è—â–∏–µ

    const txId = tx?.hash || tx?.transaction_id?.hash || tx?.lt;
    if (state.lastSeenTxId && txId && txId === state.lastSeenTxId) break;

    const valueNano =
      Number(inMsg?.value) || Number(inMsg?.amount) || Number(tx?.value) || 0;

    const comment =
      inMsg?.decoded?.comment || inMsg?.message || tx?.message || null;

    const country = normalizeCountry(comment);
    if (country && valueNano > 0) addDonation(country, valueNano / NANOTONS);
  }

  const newest = items[0];
  if (newest) {
    state.lastSeenTxId =
      newest?.hash ||
      newest?.transaction_id?.hash ||
      newest?.lt ||
      state.lastSeenTxId;
  }
}

async function pollOnce() {
  try {
    await fetchFromTonapi();
    ensureBaseCountries(stats); // –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π

    // —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫—ç—à
    safeWriteJSON(STATS_FILE, stats);
    safeWriteJSON(STATE_FILE, state);

    // –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Google Sheets (–µ—Å–ª–∏ –º–æ–¥—É–ª—å —Ä–µ–∞–ª—å–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω)
    try {
      if (
        typeof updateStats === "function" &&
        updateStats !== (async () => {})
      ) {
        await updateStats(stats);
        console.log("‚úÖ Google Sheet –æ–±–Ω–æ–≤–ª—ë–Ω");
      }
    } catch (e) {
      console.warn("‚ö†Ô∏è  Sheets –æ—à–∏–±–∫–∞:", e.message);
    }

    const top5 = Object.entries(stats)
      .sort((a, b) => b[1] - a[1])
      .slice(0, 5);
    console.log("üìä –¢–æ–ø-5:", top5);
  } catch (e) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ä–æ—Å–∞:", e.message);
  }
}

let timer = null;
function startPolling() {
  if (timer) clearInterval(timer);
  timer = setInterval(pollOnce, POLL_INTERVAL_MS);
  pollOnce();
}

// ===== utils: –∞–¥–º–∏–Ω-–∫–ª—é—á =====
function getAdminKey(req) {
  // –º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ –∏–ª–∏ –≤ —Ç–µ–ª–µ
  return req.headers["x-admin-key"] || (req.body && req.body.key) || "";
}

// ===== routes =====
app.get("/", async (_req, reply) => {
  reply.send({
    ok: true,
    message: "TON donations backend",
    endpoints: ["/health", "/stats"],
  });
});

app.get("/health", async (_req, reply) => {
  reply.send({ ok: true, lastSeenTxId: state.lastSeenTxId });
});

app.get("/stats", async (_req, reply) => {
  ensureBaseCountries(stats);
  reply.header("Cache-Control", "no-store");
  reply.send(stats);
});

// === ADMIN: —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–±—Å–æ–ª—é—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —Å—Ç—Ä–∞–Ω–µ ===
// Body: { key: string, country: string, amount: number }
app.post("/admin/update-country", async (req, reply) => {
  try {
    const key = getAdminKey(req);
    if (!ADMIN_KEY || key !== ADMIN_KEY)
      return reply.code(403).send({ error: "Forbidden" });

    const { country, amount } = req.body || {};
    const normalized = normalizeCountry(country);
    if (!normalized) return reply.code(400).send({ error: "Unknown country" });

    const num = Number(amount);
    if (!Number.isFinite(num) || num < 0)
      return reply.code(400).send({ error: "Invalid amount" });

    stats[normalized] = Number(num.toFixed(6));
    ensureBaseCountries(stats);
    safeWriteJSON(STATS_FILE, stats);

    try {
      if (
        typeof updateStats === "function" &&
        updateStats !== (async () => {})
      ) {
        await updateStats(stats);
      }
    } catch (e) {
      console.warn("‚ö†Ô∏è  Sheets –æ—à–∏–±–∫–∞:", e.message);
    }

    return reply.send({
      ok: true,
      country: normalized,
      amount: stats[normalized],
    });
  } catch (e) {
    console.error("‚ùå /admin/update-country:", e);
    return reply.code(500).send({ error: "Internal error" });
  }
});

// === ADMIN: –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç/–¥–æ–±–∞–≤–∏—Ç—å —Å—É–º–º—É –∫ —Å—Ç—Ä–∞–Ω–µ ===
// Body: { key: string, country: string, delta: number }
app.post("/admin/add-country", async (req, reply) => {
  try {
    const key = getAdminKey(req);
    if (!ADMIN_KEY || key !== ADMIN_KEY)
      return reply.code(403).send({ error: "Forbidden" });

    const { country, delta } = req.body || {};
    const normalized = normalizeCountry(country);
    if (!normalized) return reply.code(400).send({ error: "Unknown country" });

    const d = Number(delta);
    if (!Number.isFinite(d))
      return reply.code(400).send({ error: "Invalid delta" });

    if (!stats[normalized]) stats[normalized] = 0;
    stats[normalized] = Number((stats[normalized] + d).toFixed(6));
    if (stats[normalized] < 0) stats[normalized] = 0;

    ensureBaseCountries(stats);
    safeWriteJSON(STATS_FILE, stats);

    try {
      if (
        typeof updateStats === "function" &&
        updateStats !== (async () => {})
      ) {
        await updateStats(stats);
      }
    } catch (e) {
      console.warn("‚ö†Ô∏è  Sheets –æ—à–∏–±–∫–∞:", e.message);
    }

    return reply.send({
      ok: true,
      country: normalized,
      amount: stats[normalized],
    });
  } catch (e) {
    console.error("‚ùå /admin/add-country:", e);
    return reply.code(500).send({ error: "Internal error" });
  }
});

// ===== start =====
app.listen({ port: PORT, host: HOST }, (err, address) => {
  if (err) {
    console.error("‚ùå Fastify listen error:", err);
    process.exit(1);
  }
  console.log(`üöÄ Server on ${address}`);
  if (!TON_WALLET) {
    console.warn("‚ö†Ô∏è  TON_WALLET –Ω–µ –∑–∞–¥–∞–Ω ‚Äî –æ–ø—Ä–æ—Å TonAPI –æ—Ç–∫–ª—é—á—ë–Ω");
  } else {
    startPolling();
  }
});
