require("dotenv").config();

const express = require("express");
const cors = require("cors");
const fs = require("fs");
const path = require("path");
const axios = require("axios");

// ================== ENV ==================
const PORT = Number(process.env.PORT || 3000);
const STATS_FILE = process.env.STATS_FILE || "stats.json";
const STATE_FILE = process.env.STATE_FILE || "state.json"; // –≥–¥–µ —Ö—Ä–∞–Ω–∏–º lastSeenTxId
const FRONTEND_ORIGIN = process.env.FRONTEND_ORIGIN || "*";

const TON_WALLET = process.env.TON_WALLET; // –∞–¥—Ä–µ—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ EQ../UQ..
const TONAPI_KEY = process.env.TONAPI_KEY || ""; // –∫–ª—é—á –∏–∑ TonConsole
const POLL_INTERVAL_MS = Number(process.env.POLL_INTERVAL_MS || 30000);

// ================== Google Sheets (–º—è–≥–∫–∏–π –∏–º–ø–æ—Ä—Ç) ==================
let updateStats = async () => {};
try {
  ({ updateStats } = require("./googleSheets"));
  console.log("‚úÖ googleSheets –ø–æ–¥–∫–ª—é—á–µ–Ω");
} catch (e) {
  console.warn("‚ö†Ô∏è  googleSheets –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω:", e?.message || e);
  console.warn("    –ü—Ä–æ–¥–æ–ª–∂–∞—é –±–µ–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Google Sheets.");
}

// ================== Express ==================
const app = express();
app.use(cors({ origin: FRONTEND_ORIGIN === "*" ? true : FRONTEND_ORIGIN }));

// ================== Files helpers ==================
function safeReadJSON(file, fallback) {
  try {
    if (fs.existsSync(file)) {
      return JSON.parse(fs.readFileSync(file, "utf8"));
    }
  } catch (e) {
    console.warn(`‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å ${file}:`, e.message);
  }
  return fallback;
}

function safeWriteJSON(file, data) {
  try {
    fs.writeFileSync(file, JSON.stringify(data, null, 2));
  } catch (e) {
    console.warn(`‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å ${file}:`, e.message);
  }
}

console.log("üîß CWD:", process.cwd());
console.log("üìÑ STATS_FILE:", path.resolve(STATS_FILE));
console.log("üìÑ STATE_FILE:", path.resolve(STATE_FILE));

// ================== –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ==================
let stats = safeReadJSON(STATS_FILE, {}); // { "United States": 123.45, ... } (TON)
let state = Object.assign({ lastSeenTxId: null }, safeReadJSON(STATE_FILE, {}));
const NANOTONS = 1e9;

// ================== –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω ==================
const COUNTRY_SET = new Set([
  "United States",
  "India",
  "China",
  "Japan",
  "Germany",
  "United Kingdom",
  "France",
  "Italy",
  "Canada",
  "Australia",
  "Brazil",
  "Mexico",
  "Spain",
  "Netherlands",
  "Turkey",
  "South Korea",
  "Indonesia",
  "Saudi Arabia",
  "United Arab Emirates",
  "Israel",
  "Sweden",
  "Switzerland",
  "Poland",
  "Ukraine",
  "Russia",
  "Argentina",
  "Colombia",
  "South Africa",
  "Nigeria",
  "Egypt",
  "Vietnam",
  "Thailand",
  "Malaysia",
  "Singapore",
  "Philippines",
  "Kazakhstan",
  "Norway",
  "Denmark",
  "Ireland",
  "Austria",
]);

// —á–∞—Å—Ç–∏—á–Ω—ã–µ –∞–ª–∏–∞—Å—ã (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
const ALIASES = {
  USA: "United States",
  US: "United States",
  "U.S.": "United States",
  UK: "United Kingdom",
  UAE: "United Arab Emirates",
  KOREA: "South Korea",
  "SOUTH KOREA": "South Korea",
  RUSSIA: "Russia",
  CHINA: "China",
  INDIA: "India",
};

function normalizeCountry(raw) {
  if (!raw || typeof raw !== "string") return null;
  let s = raw.trim();
  if (!s) return null;

  // –ø—Ä—è–º—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
  if (COUNTRY_SET.has(s)) return s;

  // –ê–ª–∏–∞—Å—ã –ø–æ –≤–µ—Ä—Ö–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
  const upper = s.toUpperCase();
  if (ALIASES[upper]) return ALIASES[upper];

  // –¢–∞–π—Ç–ª–∫–µ–π—Å
  const title =
    s.length < 3 ? s.toUpperCase() : s[0].toUpperCase() + s.slice(1);
  if (COUNTRY_SET.has(title)) return title;

  return null;
}

function addDonation(country, amountTON) {
  if (!country || isNaN(amountTON) || amountTON <= 0) return;
  if (!stats[country]) stats[country] = 0;
  stats[country] = Number((stats[country] + amountTON).toFixed(6)); // —Ç–æ—á–Ω–æ—Å—Ç—å –¥–æ –º–∏–∫—Ä–æ—Ç–æ–Ω–∞
}

// ================== –û–ø—Ä–æ—Å TonAPI ==================
async function fetchFromTonapi() {
  if (!TON_WALLET) throw new Error("TON_WALLET –Ω–µ –∑–∞–¥–∞–Ω –≤ .env");

  const url = `https://tonapi.io/v2/blockchain/accounts/${TON_WALLET}/transactions?limit=50`;
  const headers = TONAPI_KEY ? { Authorization: `Bearer ${TONAPI_KEY}` } : {};

  const { data } = await axios.get(url, { headers, timeout: 15000 });
  const items = data?.transactions || data?.items || [];
  if (!Array.isArray(items) || items.length === 0) return;

  // –ò–¥—ë–º –æ—Ç —Å–≤–µ–∂–∏—Ö –∫ —Å—Ç–∞—Ä—ã–º, –ø–æ–∫–∞ –Ω–µ –¥–æ–π–¥—ë–º –¥–æ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–π
  for (const tx of items) {
    const inMsg = tx?.in_msg;
    if (!inMsg) continue; // –Ω–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç —Ç–æ–ª—å–∫–æ –≤—Ö–æ–¥—è—â–∏–µ

    const txId = tx?.hash || tx?.transaction_id?.hash || tx?.lt;
    if (state.lastSeenTxId && txId && txId === state.lastSeenTxId) break;

    const valueNano =
      Number(inMsg?.value) || Number(inMsg?.amount) || Number(tx?.value) || 0;

    // –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–ª–∞—Ç–µ–∂—É (–≥–¥–µ –¥–æ–Ω–æ—Ä –ø–∏—à–µ—Ç —Å—Ç—Ä–∞–Ω—É)
    const comment =
      inMsg?.decoded?.comment || inMsg?.message || tx?.message || null;

    const country = normalizeCountry(comment);
    if (country && valueNano > 0) {
      addDonation(country, valueNano / NANOTONS);
    }
  }

  // –∑–∞–ø–æ–º–Ω–∏–º "—Å–∞–º—É—é —Å–≤–µ–∂—É—é" —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –∫–∞–∫ –º–∞—Ä–∫–µ—Ä
  const newest = items[0];
  if (newest) {
    state.lastSeenTxId =
      newest?.hash ||
      newest?.transaction_id?.hash ||
      newest?.lt ||
      state.lastSeenTxId;
  }
}

// ================== –¶–∏–∫–ª –æ–ø—Ä–æ—Å–∞ ==================
async function pollOnce() {
  try {
    await fetchFromTonapi();

    // —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞ –¥–∏—Å–∫
    safeWriteJSON(STATS_FILE, stats);
    safeWriteJSON(STATE_FILE, state);

    // –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Google Sheets (–º—è–≥–∫–æ)
    try {
      await updateStats(stats);
      console.log("‚úÖ Google Sheet –æ–±–Ω–æ–≤–ª—ë–Ω");
    } catch (e) {
      console.warn("‚ö†Ô∏è  Sheets –ø—Ä–æ–ø—É—â–µ–Ω:", e.message);
    }

    const top5 = Object.entries(stats)
      .sort((a, b) => b[1] - a[1])
      .slice(0, 5);
    console.log("üìä –¢–æ–ø-5:", top5);
  } catch (e) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ä–æ—Å–∞:", e.message);
  }
}

let timer = null;
function startPolling() {
  if (timer) clearInterval(timer);
  timer = setInterval(pollOnce, POLL_INTERVAL_MS);
  // –ø–µ—Ä–≤—ã–π –ø—Ä–æ—Ö–æ–¥ —Å—Ä–∞–∑—É
  pollOnce();
}

// ================== API ==================
app.get("/health", (_req, res) => {
  res.json({ ok: true, lastSeenTxId: state.lastSeenTxId });
});

app.get("/stats", (_req, res) => {
  res.set("Cache-Control", "no-store");
  res.json(stats);
});

// ================== START ==================
app.listen(PORT, () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ :${PORT}`);
  if (!TON_WALLET) {
    console.warn("‚ö†Ô∏è  TON_WALLET –Ω–µ –∑–∞–¥–∞–Ω ‚Äî –æ–ø—Ä–æ—Å TonAPI –æ—Ç–∫–ª—é—á—ë–Ω");
  } else {
    startPolling();
  }
});

// —Å—Ç—Ä–∞—Ö–æ–≤–∫–∞ –Ω–∞ —Å–ª—É—á–∞–π –æ—à–∏–±–æ–∫
process.on("uncaughtException", (err) =>
  console.error("üí• uncaughtException:", err)
);
process.on("unhandledRejection", (r) =>
  console.error("üí• unhandledRejection:", r)
);
